from src.models.basic import Pizzeria
from src.models.revenue import Revenue, CountryFinStatsResponse, CountryRevenue

from itertools import groupby
from typing import List, Dict, Any

# def format_country_info(country: Country) -> str:
#     return f"""
# <b>{country.name}</b>
# Total Revenue: ${country.total_revenue:,.2f}
# Number of Pizzerias: {len(country.pizzerias)}
# """
def format_working_hours(working_time_list: List) -> str:
    day_map = {
        "Monday": "Mon",
        "Tuesday": "Tue",
        "Wednesday": "Wed",
        "Thursday": "Thu",
        "Friday": "Fri",
        "Saturday": "Sat",
        "Sunday": "Sun",
    }

    days_order = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"]
    working_time_list.sort(key=lambda x: (days_order.index(x.day_alias), x.working_time_start, x.working_time_end))

    grouped = []
    for _, group in groupby(
        working_time_list, 
        key=lambda x: (x.working_time_start, x.working_time_end)
    ):
        group = list(group)
        start_time = f"{group[0].working_time_start // 3600:02d}:00"
        end_time = f"{group[0].working_time_end // 3600:02d}:00"
        days = [day_map[time.day_alias] for time in group]

        formatted_days = []
        temp = [days[0]]
        for i in range(1, len(days)):
            if days_order.index(group[i].day_alias) == days_order.index(group[i - 1].day_alias) + 1:
                temp.append(days[i])
            else:
                formatted_days.append(f"{temp[0]}-{temp[-1]}" if len(temp) > 1 else temp[0])
                temp = [days[i]]
        formatted_days.append(f"{temp[0]}-{temp[-1]}" if len(temp) > 1 else temp[0])

        grouped.append(f"{', '.join(formatted_days)}: {start_time}-{end_time}")

    return "\n".join(grouped)

def format_pizzeria_info(pizzeria: Pizzeria) -> str:
    working_time_list = (
        pizzeria.restaurant_week_working_time
        if hasattr(pizzeria, 'restaurant_week_working_time') and pizzeria.restaurant_week_working_time
        else getattr(pizzeria, 'stationary_week_working_time', [])
    )
    delivery_working_time_list = (
        pizzeria.delivery_week_working_time
        if hasattr(pizzeria, 'delivery_week_working_time') and pizzeria.delivery_week_working_time
        else getattr(pizzeria, 'delivery_week_work_time', [])
    )
    restaurant_hours = format_working_hours(working_time_list)
    delivery_hours = format_working_hours(delivery_working_time_list)

    return f"""
<b>{pizzeria.name} üçï</b>
<b>–ê–¥—Ä–µ—Å:</b> {pizzeria.address}
<b>–¢–µ–ª–µ—Ñ–æ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä–∞:</b> {pizzeria.manager_phone_number or "–ù–µ —É–∫–∞–∑–∞–Ω"} üìû
<b>–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã:</b> {pizzeria.begin_date_work if pizzeria.begin_date_work else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'} üóìÔ∏è
<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:</b> {pizzeria.employee_count or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"} üë•
<b>–í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫—Ä—ã—Ç:</b> {"–î–∞" if pizzeria.is_temporarily_closed else "–ù–µ—Ç"} üö´
<b>–ú–∏–Ω. —Å—É–º–º–∞ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É:</b> {pizzeria.min_delivery_order_price if pizzeria.min_delivery_order_price else "–ù–µ–∏–∑–≤."} üòã

<b>–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ üè¢:</b>
{restaurant_hours}

<b>–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏ üöö:</b>
{delivery_hours}
"""

def format_stats(stats: Revenue, currency: str) -> str:
    return f"""
<b>–î–∞—Ç–∞:</b> {stats.date.strftime('%Y-%m-%d')}
üè† <b>–î–æ—Ö–æ–¥ –æ—Ç –∫–∞—Å—Å—ã:</b> {stats.stationaryRevenue:,.2f} {currency} ({stats.stationaryOrderCount} –∑–∞–∫–∞–∑–æ–≤)
üöö <b>–î–æ—Ö–æ–¥ –æ—Ç –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {stats.deliveryRevenue:,.2f} {currency} ({stats.deliveryOrderCount} –∑–∞–∫–∞–∑–æ–≤)
üíµ <b>–û–±—â–∏–π –¥–æ—Ö–æ–¥:</b> {stats.revenue:,.2f} {currency}
üì¶ <b>–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤:</b> {stats.orderCount}
üìä <b>–°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞:</b> {stats.avgCheck:,.2f} {currency}
"""

def format_country_stats(country_name: str, stats: CountryFinStatsResponse) -> str:
    return f"""
<b>{country_name}</b>:

üí∞ <b>–í–∞–ª—é—Ç–∞:</b> {stats.currency}

<b>–î–æ—Ö–æ–¥—ã:</b>
- <b>—Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞:</b> {stats.current_year_progressive_total:,.0f} {stats.currency}
- <b>–ø—Ä–æ—à–ª–æ–≥–æ –≥–æ–¥–∞:</b> {stats.previous_year_revenue:,.0f} {stats.currency}
- <b>—Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞:</b> {stats.current_month_progressive_total:,.0f} {stats.currency}
- <b>–≤ –ø—Ä–æ—à–ª–æ–º –º–µ—Å—è—Ü–µ ({stats.previous_month.name} {stats.previous_month.year}):</b> {stats.previous_month.revenue:,.0f} {stats.currency}
- <b>–∑–∞ —Ç–æ—Ç –∂–µ –º–µ—Å—è—Ü –≥–æ–¥ –Ω–∞–∑–∞–¥ ({stats.year_ago.name} {stats.year_ago.year}):</b> {stats.year_ago.revenue:,.0f} {stats.currency}
- <b>—Å–µ–≥–æ–¥–Ω—è:</b> {stats.today_progressive_total:,.0f} {stats.currency}

üçï <b>–†–∞–±–æ—Ç–∞—é—â–∏–µ –ø–∏—Ü—Ü–µ—Ä–∏–∏:</b> {stats.working_pizzerias}
"""

import locale
import pycountry
import flag

locale.setlocale(locale.LC_ALL, '')

def format_revenue(countries: List[CountryRevenue]):
    formatted_revenue = []

    for country in countries:
        country_data = pycountry.countries.get(alpha_2=country.countryCode.upper())
        country_name = country_data.name if country_data else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä–∞–Ω–∞"
        country_emoji = flag.flag(country.countryCode) if country_data else "üè≥Ô∏è"

        # revenue = locale.format_string("%d", country.revenue, grouping=True)
        formatted_revenue.append(
            f"{country_emoji} {country_name}: {country.revenue:,.2f} {country.currency}"
        )

    return "\n".join(formatted_revenue)

def get_currency_from_country_code(country_code: str) -> str:
    try:
        country = pycountry.countries.get(alpha_2=country_code.upper())
        if not country:
            return "UNKNOWN"

        currency = pycountry.currencies.get(numeric=country.numeric)
        return currency.alpha_3 if currency else "UNKNOWN"
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞–ª—é—Ç—ã –¥–ª—è —Å—Ç—Ä–∞–Ω—ã {country_code}: {e}")
        return "UNKNOWN"
    
def format_admin_statistics_response(data: Dict[str, Any]) -> str:
    response = [
        f"üë• *Total Users:* {data['counts']['total']}",
        f"‚úÖ *Active Users:* {data['counts']['active']}",
        f"‚ùå *Inactive Users:* {data['counts']['inactive']}\n",
        
        "*Recent Activity:*",
        f"‚Ä¢ Day: {data['activity']['day']['active_users']} active, {data['activity']['day']['new_users']} new",
        f"‚Ä¢ Week: {data['activity']['week']['active_users']} active, {data['activity']['week']['new_users']} new",
        f"‚Ä¢ Month: {data['activity']['month']['active_users']} active, {data['activity']['month']['new_users']} new\n",

    ]
    
    if data['distribution']['countries']:
        response.extend([
            "*Country Distribution:*"
        ])
        for country_id, count in data['distribution']['countries'].items():
            percentage = (count / data['counts']['total']) * 100
            response.append(f"‚Ä¢ Country {country_id}: {count} users ({percentage:.1f}%)")
        response.append("")

    if data['distribution']['pizzerias']:
        response.extend([
            "*Top Pizzerias:*"
        ])
        # Show top 5 pizzerias
        top_pizzerias = sorted(
            data['distribution']['pizzerias'].items(),
            key=lambda x: x[1],
            reverse=True
        )[:5]
        for pizzeria_id, count in top_pizzerias:
            percentage = (count / data['counts']['total']) * 100
            response.append(f"‚Ä¢ Pizzeria {pizzeria_id}: {count} users ({percentage:.1f}%)")
        response.append("")

    # Add notification statistics
    response.extend([
        "*Notification Statistics:*",
        f"‚Ä¢ Average Failed: {data['notifications']['average_failed']}",
        f"‚Ä¢ Max Failed: {data['notifications']['max_failed']}",
        f"‚Ä¢ Users with Failures: {data['notifications']['users_with_failures']}\n",
        
        "*Notification Time Distribution:*"
    ])
    
    # Format time distribution in 4-hour blocks for readability
    time_dist = data['notifications']['time_distribution']
    time_blocks = {
        "Night (00-04)": sum(time_dist.get(str(h), 0) for h in range(0, 4)),
        "Early Morning (04-08)": sum(time_dist.get(str(h), 0) for h in range(4, 8)),
        "Morning (08-12)": sum(time_dist.get(str(h), 0) for h in range(8, 12)),
        "Afternoon (12-16)": sum(time_dist.get(str(h), 0) for h in range(12, 16)),
        "Evening (16-20)": sum(time_dist.get(str(h), 0) for h in range(16, 20)),
        "Night (20-24)": sum(time_dist.get(str(h), 0) for h in range(20, 24))
    }
    
    for block, count in time_blocks.items():
        if count > 0:  # Only show blocks with users
            percentage = (count / data['counts']['total']) * 100
            response.append(f"‚Ä¢ {block}: {count} users ({percentage:.1f}%)")
    response.append("")

    # Add retention statistics
    response.extend(["*Retention Rates:*"])
    for period, stats in data['retention'].items():
        if stats['total'] > 0:  # Only show periods with data
            response.append(
                f"‚Ä¢ {period.title()}: {stats['rate']}% ({stats['retained']}/{stats['total']} users)"
            )

    return "\n".join(response)